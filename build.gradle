buildscript 
{
    repositories {
        jcenter()
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

if (project.hasProperty("dev")) 
{
    version += "-dev" + dev
}

version = project.version
group = "mchorse.metamorph"
archivesBaseName = "metamorph"
sourceCompatibility = targetCompatibility = "1.8"

compileJava 
{
    sourceCompatibility = targetCompatibility = "1.8"
}

/* Minecraft configuration */

minecraft 
{
    mappings channel: 'snapshot', version: project.snapshot

    runs {
        client {
            workingDirectory project.file('run')
        }

        server {

        }
    }
}

dependencies 
{
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    implementation fg.deobf("curse.maven:mclib-304750:4044267")
}

/*eclipse
{
    classpath
    {
        file
        {
            whenMerged
            { classpath ->
                def ver = project.mc_version
                *//* Fucking gradle 2.14 doesn't have fileReference() method,
                 * screw you piece of shit *//*
                def getMeReference = { File file ->
                	return [
                		getFile: { return file },
                		getPath: { return file.getAbsolutePath() },
                		getJarURL: { return file.getAbsolutePath() },
                		isRelativeToPathVariable: { return false }
                	] as org.gradle.plugins.ide.eclipse.model.FileReference
                }

                def lib = entries.find { it.path.contains "mclib-${mclib}" }
                lib.sourcePath = getMeReference(file("run/libs/mclib-${mclib}-${ver}-sources.jar"))
            }
        }
    }
}*/

processResources
{
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    inputs.property "version", project.version
    inputs.property "mcversion", project.mc_version

    project.version += "-" + project.mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.mc_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
def copyDir = "$compileJava.temporaryDir/replaced"

task tokenReplace(type:Copy){
    var test = sourceSets.main.java.sourceDirectories;
    from(sourceSets.main.java.sourceDirectories)
    into copyDir

    filter(ReplaceTokens, tokens: [VERSION: project.version, MCLIB: project.mclib])
}

compileJava.setSource(copyDir)

compileJava.dependsOn(tokenReplace)

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

/* Comparing keys */
task compareLangFiles {
    doLast {
        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n");

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), true)
            }

            return map
        }

        if (!help.exists()) {
            return
        }

        def en = file("${help.getAbsolutePath()}/en_US.lang")
        def en_map = parse(en)

        for (lang_file in help.listFiles()) {
            if (!lang_file.name.endsWith(".lang") || lang_file.name.startsWith("en_US")) {
                continue
            }

            def lang_map = parse(lang_file)
            def missing = new ArrayList()
            def extra = new ArrayList()

            for (key in en_map.keySet()) {
                if (!lang_map.containsKey(key)) {
                    missing.add(key)
                }
            }

            for (key in lang_map.keySet()) {
                if (!en_map.containsKey(key)) {
                    extra.add(key)
                }
            }

            missing.sort()
            extra.sort()

            print("\n")

            if (!missing.isEmpty() || !extra.isEmpty()) {
                if (!missing.isEmpty()) {
                    print("Language file ${lang_file.getName()} misses following keys:\n")

                    for (key in missing) {
                        print("- ${key}\n")
                    }
                }

                if (!extra.isEmpty()) {
                    print("Language file ${lang_file.getName()} has additional keys:\n")

                    for (key in extra) {
                        print("- ${key}\n")
                    }
                }
            }
            else {
                print("Language file ${lang_file.getName()} fully matches ${en.getName()}!\n")
            }
        }
    }
}

task copyLangStrings {
    doLast {
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n");

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), split.substring(index + 1))
            }

            return map
        }
        
        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def en = file("${help.getAbsolutePath()}/en_US.lang")

        for (file in help.listFiles())
        {
            if (file.name.endsWith(".lang") && !file.name.startsWith("en_"))
            {
                def strings = parse(file)
                def splits = en.text.split("\n")

                for (def i = 0; i < splits.length; i++) {
                    def str = splits[i];

                    if (str.contains("=")) {
                        def index = str.indexOf("=")
                        def key = str.substring(0, index)
                        def value = str.substring(index)

                        if (strings.containsKey(key)) {
                            splits[i] = key + "=" + strings.get(key)
                        }
                    }
                }

                file.write(splits.join("\n"))

                print("Wrote to ${file.name}...")
            }
        }

        print("Done!")
    }
}