package mchorse.metamorph.api.morphs;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import mchorse.mclib.client.gui.utils.GuiUtils;
import mchorse.metamorph.Metamorph;
import mchorse.metamorph.api.EntityUtils;
import mchorse.metamorph.api.MorphSettings;
import mchorse.metamorph.api.models.IHandProvider;
import mchorse.metamorph.capabilities.morphing.IMorphing;
import mchorse.metamorph.entity.SoundHandler;
import mchorse.metamorph.util.InvokeUtil;
import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelQuadruped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.entity.Render;
import net.minecraft.client.renderer.entity.RenderLivingBase;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityAgeable;
import net.minecraft.entity.EntityList;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.boss.EntityDragon;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.passive.EntityPig;
import net.minecraft.entity.passive.EntityRabbit;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.DamageSource;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

/**
 * Entity morph class
 * 
 * This morph class is based on 
 */
public class EntityMorph extends AbstractMorph
{
    /**
     * Target entity which is going to be used for nametag rendering
     */
    public static EntityLivingBase renderEntity = null;

    /**
     * Entity used by this morph to power morphing
     */
    protected EntityLivingBase entity;

    /**
     * Used for constructing an entity during loop 
     */
    protected NBTTagCompound entityData;

    /**
     * Custom settings were generated by this morph 
     */
    protected boolean customSettings;

    /**
     * If the associated entity is being updated
     */
    protected boolean updatingEntity = false;

    /**
     * Did this instance already tried to setup first-person hands 
     */
    @SideOnly(Side.CLIENT)
    public boolean triedHands;

    /* Rendering */

    /**
     * Texture of the entity 
     */
    @SideOnly(Side.CLIENT)
    public ResourceLocation texture;

    /**
     * Cached model renderer for the left hand
     */
    @SideOnly(Side.CLIENT)
    public ModelRenderer leftHand;

    /**
     * Cached model renderer for the right hand
     */
    @SideOnly(Side.CLIENT)
    public ModelRenderer rightHand;

    @Override
    @SideOnly(Side.CLIENT)
    public void renderOnScreen(EntityPlayer player, int x, int y, float scale, float alpha)
    {
        EntityLivingBase entity = this.getEntity(player.world);

        if (entity.height > 2)
        {
            scale *= 2 / entity.height;
        }
        else if (entity.height < 0.6)
        {
            scale *= 0.5 / entity.height;
        }

        if (this.name.equals("Ghast"))
        {
            scale = 5F;
        }
        else if (this.name.equals("Guardian") && entity.height > 1.8)
        {
            scale *= 1 / entity.height;
        }

        GuiUtils.drawEntityOnScreen(x, y, scale, entity, alpha);
    }

    @Override
    @SideOnly(Side.CLIENT)
    @SuppressWarnings("rawtypes")
    public boolean renderHand(EntityPlayer player, EnumHand hand)
    {
        if (!this.settings.hands)
        {
            return true;
        }

        if (!this.triedHands && this.renderer != null)
        {
            this.setupTexture();
            this.setupHands();
            this.triedHands = true;
        }

        if (this.renderer == null || this.texture == null || this.leftHand == null || this.rightHand == null)
        {
            return true;
        }

        Minecraft.getMinecraft().renderEngine.bindTexture(this.texture);
        ModelBase model = ((RenderLivingBase) this.renderer).getMainModel();

        model.swingProgress = 0.0F;
        model.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0625F, this.entity);

        GlStateManager.color(1.0F, 1.0F, 1.0F);

        if (hand.equals(EnumHand.MAIN_HAND))
        {
            float rax = this.rightHand.rotateAngleX;
            float ray = this.rightHand.rotateAngleY;
            float raz = this.rightHand.rotateAngleZ;
            float rpx = this.rightHand.rotationPointX;
            float rpy = this.rightHand.rotationPointY;
            float rpz = this.rightHand.rotationPointZ;

            this.rightHand.rotateAngleX = 0;
            this.rightHand.rotateAngleY = 0;
            this.rightHand.rotateAngleZ = 0;
            this.rightHand.rotationPointX = -6;
            this.rightHand.rotationPointY = 4;
            this.rightHand.rotationPointZ = 0;
            this.rightHand.render(0.0625F);

            this.rightHand.rotateAngleX = rax;
            this.rightHand.rotateAngleY = ray;
            this.rightHand.rotateAngleZ = raz;
            this.rightHand.rotationPointX = rpx;
            this.rightHand.rotationPointY = rpy;
            this.rightHand.rotationPointZ = rpz;
        }
        else
        {
            float rax = this.leftHand.rotateAngleX;
            float rpx = this.leftHand.rotationPointX;
            float rpy = this.leftHand.rotationPointY;
            float rpz = this.leftHand.rotationPointZ;

            this.leftHand.rotateAngleX = 0;
            this.leftHand.rotationPointX = 6;
            this.leftHand.rotationPointY = 4;
            this.leftHand.rotationPointZ = 0;
            this.leftHand.render(0.0625F);

            this.leftHand.rotateAngleX = rax;
            this.leftHand.rotationPointX = rpx;
            this.leftHand.rotationPointY = rpy;
            this.leftHand.rotationPointZ = rpz;
        }

        return true;
    }

    @Override
    @SideOnly(Side.CLIENT)
    @SuppressWarnings({"unchecked", "rawtypes"})
    public void render(EntityLivingBase entity, double x, double y, double z, float entityYaw, float partialTicks)
    {
        if (entity == null)
        {
            return;
        }

        Render render = this.renderer;

        if (render == null)
        {
            this.getEntity(entity.world);

            /* Make transformation seamless... */
            this.entity.rotationYaw = entity.rotationYaw;
            this.entity.rotationPitch = entity.rotationPitch;
            this.entity.rotationYawHead = entity.rotationYawHead;
            this.entity.renderYawOffset = entity.renderYawOffset;

            this.entity.prevRotationYaw = entity.prevRotationYaw;
            this.entity.prevRotationPitch = entity.prevRotationPitch;
            this.entity.prevRotationYawHead = entity.prevRotationYawHead;
            this.entity.prevRenderYawOffset = entity.prevRenderYawOffset;

            render = this.renderer;
        }

        if (render != null)
        {
            if (render instanceof RenderLivingBase)
            {
                ModelBase model = ((RenderLivingBase) render).getMainModel();

                if (model instanceof ModelBiped)
                {
                    ((ModelBiped) model).isSneak = entity.isSneaking();
                }
            }

            renderEntity = entity;

            if (this.entity instanceof EntityDragon)
            {
                GlStateManager.pushMatrix();
                GlStateManager.translate(x, y, z);
                GlStateManager.rotate(180, 0.0F, 1.0F, 0.0F);

                render.doRender(this.entity, 0, 0, 0, entityYaw, partialTicks);

                GlStateManager.popMatrix();
            }
            else
            {
                render.doRender(this.entity, x, y, z, entityYaw, partialTicks);
            }

            renderEntity = null;
        }
    }

    /* Other stuff */

    /**
     * Set entity for this morph
     */
    public void setEntity(EntityLivingBase entity)
    {
        this.entity = entity;

        entity.setHealth(entity.getMaxHealth());
        entity.noClip = true;
        entity.setAlwaysRenderNameTag(true);

        if (entity instanceof EntityLiving)
        {
            ((EntityLiving) entity).setLeftHanded(false);
        }

        if (this.settings == MorphSettings.DEFAULT)
        {
            this.customSettings = true;
            this.settings = new MorphSettings();

            if (this.settings.health == 20)
            {
                this.settings.health = (int) entity.getMaxHealth();
            }

            this.settings.hostile = entity instanceof EntityMob || entity instanceof EntityAnimal;
        }

        if (entity instanceof EntityLiving && !(entity instanceof EntityDragon))
        {
            ((EntityLiving) entity).setNoAI(true);
        }

        if (entity instanceof EntityAgeable && !entity.world.isRemote)
        {
            ((EntityAgeable) entity).setScaleForAge(entity.isChild());
        }

        if (this.entityData == null)
        {
            this.entityData = EntityUtils.stripEntityNBT(this.entity.serializeNBT());
        }
    }

    /**
     * Get used entity of this morph 
     */
    public EntityLivingBase getEntity()
    {
        return this.entity;
    }

    /**
     * Get used entity of this morph, if there's no entity, just create it with 
     * provided world.
     */
    public EntityLivingBase getEntity(World world)
    {
        if (this.entity == null)
        {
            this.setupEntity(world);
        }

        return this.entity;
    }

    @Override
    public void update(EntityLivingBase target, IMorphing cap)
    {
        if (entity == null)
        {
            this.setupEntity(target.world);
        }

        /* Update entity */
        this.updatingEntity = true;
        this.entity.setEntityInvulnerable(true);
        this.updateEntity(target);
        this.updatingEntity = false;
        this.entity.deathTime = target.deathTime;
        this.entity.hurtTime = target.hurtTime;

        if (this.entity instanceof EntityRabbit)
        {
            if (target.ticksExisted % 10 == 0 && target.limbSwingAmount > 0.4)
            {
                ((EntityRabbit) this.entity).startJumping();
            }
        }

        /* Update player */
        this.updateSize(target, this.entity.width, this.entity.height);

        super.update(target, cap);

        /* Update entity's inventory */
        if (target.world.isRemote)
        {
            int i = 0;

            for (ItemStack stack : target.getEquipmentAndArmor())
            {
                this.entity.setItemStackToSlot(EntityUtils.slotForIndex(i), stack);

                i++;
            }

            entity.setInvisible(target.isInvisible());
        }

        /* Injecting player's properties */
        this.entity.setPosition(target.posX, target.posY, target.posZ);

        this.entity.lastTickPosX = target.lastTickPosX;
        this.entity.lastTickPosY = target.lastTickPosY;
        this.entity.lastTickPosZ = target.lastTickPosZ;

        this.entity.prevPosX = target.prevPosX;
        this.entity.prevPosY = target.prevPosY;
        this.entity.prevPosZ = target.prevPosZ;

        this.entity.rotationYaw = target.rotationYaw;
        this.entity.rotationPitch = target.rotationPitch;

        this.entity.motionX = target.motionX;
        this.entity.motionY = target.motionY;
        this.entity.motionZ = target.motionZ;

        this.entity.rotationYawHead = target.rotationYawHead;
        this.entity.renderYawOffset = target.renderYawOffset;

        this.entity.isSwingInProgress = target.isSwingInProgress;
        this.entity.swingProgress = target.swingProgress;
        this.entity.limbSwing = target.limbSwing;
        this.entity.limbSwingAmount = target.limbSwingAmount;

        this.entity.prevPosX = target.prevPosX;
        this.entity.prevPosY = target.prevPosY;
        this.entity.prevPosZ = target.prevPosZ;

        this.entity.prevRotationYaw = target.prevRotationYaw;
        this.entity.prevRotationPitch = target.prevRotationPitch;
        this.entity.prevRotationYawHead = target.prevRotationYawHead;
        this.entity.prevRenderYawOffset = target.prevRenderYawOffset;

        this.entity.prevSwingProgress = target.prevSwingProgress;
        this.entity.prevLimbSwingAmount = target.prevLimbSwingAmount;

        if (target instanceof EntityPlayer && ((EntityPlayer) target).isCreative())
        {
            this.entity.fallDistance = 0;
        }
        else
        {
            this.entity.fallDistance = target.fallDistance;
        }

        this.entity.setSneaking(target.isSneaking());
        this.entity.setSprinting(target.isSprinting());
        this.entity.onGround = target.onGround;
        this.entity.isAirBorne = target.isAirBorne;
        this.entity.ticksExisted = target.ticksExisted;
        /* Fighting with death of entities like zombies */
        this.entity.setHealth(target.getHealth());

        if (cap != null)
        {
            this.entity.setAir(cap.getHasSquidAir() ? cap.getSquidAir() : target.getAir());
        }

        /* Now goes the code responsible for achieving somewhat riding 
         * support. This is ridiculous... */
        boolean targetRiding = target.isRiding();
        boolean entityRiding = this.entity.isRiding();

        if (targetRiding && !entityRiding)
        {
            this.entity.startRiding(new EntityPig(this.entity.world));
        }
        else if (!targetRiding && entityRiding)
        {
            this.entity.dismountRidingEntity();
        }

        if (targetRiding)
        {
            /* One day, this cast is going to backfire, I'll wait for it... */
            EntityPig ride = (EntityPig) this.entity.getRidingEntity();
            Entity targetRide = target.getRidingEntity();

            if (ride == null || targetRide == null)
            {
                return;
            }

            ride.rotationYaw = targetRide.rotationYaw;
            ride.rotationPitch = targetRide.rotationPitch;

            ride.prevRotationYaw = targetRide.prevRotationYaw;
            ride.prevRotationPitch = targetRide.prevRotationPitch;

            if (targetRide instanceof EntityLivingBase)
            {
                EntityLivingBase trr = (EntityLivingBase) targetRide;

                ride.rotationYawHead = trr.rotationYawHead;
                ride.renderYawOffset = trr.renderYawOffset;

                ride.prevRotationYawHead = trr.prevRotationYawHead;
                ride.prevRenderYawOffset = trr.prevRenderYawOffset;
            }
            else
            {
                ride.rotationYawHead = target.rotationYawHead;
                ride.renderYawOffset = target.renderYawOffset;

                ride.prevRotationYawHead = target.prevRotationYawHead;
                ride.prevRenderYawOffset = target.prevRenderYawOffset;
            }
        }
    }

    protected void updateEntity(EntityLivingBase target)
    {
        if (this.settings.updates)
        {
            if (!Metamorph.proxy.config.show_morph_idle_sounds)
            {
                this.entity.setSilent(true);
            }
            this.entity.onUpdate();
            this.entity.setSilent(false);
        }
    }

    public boolean isUpdatingEntity()
    {
        return this.updatingEntity;
    }

    @Override
    public void updateSize(EntityLivingBase target, float width, float height)
    {
        boolean isAnimalChild = this.entity instanceof EntityAgeable && this.entityData.getInteger("Age") < 0;

        /* Because Minecraft is shit at syncing data!
         * 
         * The problem is that Minecraft changes to correct size of baby 
         * animals on the client, but on the server it doesn't change anything 
         * thus I have to rely on proivded NBT data for figuring out if an 
         * animal entity is being a baby */
        if (!target.world.isRemote && isAnimalChild)
        {
            width *= 0.5;
            height *= 0.5;
        }

        super.updateSize(target, width, height);
    }

    /**
     * Setup entity
     * 
     * This is responsible for setting the entity
     */
    public void setupEntity(World world)
    {
        EntityLivingBase created = (EntityLivingBase) EntityList.createEntityByIDFromName(name, world);

        try {
            created.deserializeNBT(this.entityData);
        } catch (Exception e) {
            e.printStackTrace();
        }
        created.deathTime = 0;
        created.hurtTime = 0;
        created.limbSwing = 0;
        created.setFire(0);

        this.setEntity(created);

        if (world.isRemote)
        {
            this.setupRenderer();
        }
    }

    /**
     * Setup renderer
     * 
     * This method is responsible for setting up any client side stuff like 
     * the renderer, texture of the entity and the "hands"
     */
    @SideOnly(Side.CLIENT)
    protected void setupRenderer()
    {
        this.renderer = Minecraft.getMinecraft().getRenderManager().getEntityRenderObject(this.entity);

        if (this.renderer instanceof RenderLivingBase<?>)
        {
            ModelBase model = ((RenderLivingBase<?>) renderer).getMainModel();

            if (this.customSettings && model instanceof ModelBiped || model instanceof ModelQuadruped)
            {
                this.settings.hands = true;
            }
        }
    }

    /**
     * Get the renderer's texture
     * 
     * Very hard stuff are going on here
     */
    @SideOnly(Side.CLIENT)
    @SuppressWarnings({"unchecked", "rawtypes"})
    protected void setupTexture()
    {
        Class<Render> clazz = (Class<Render>) this.renderer.getClass();

        for (Method method : clazz.getDeclaredMethods())
        {
            Class[] args = method.getParameterTypes();

            boolean hasEntityArg = args.length == 1 && Entity.class.isAssignableFrom(args[0]);
            boolean returnsRL = method.getReturnType().isAssignableFrom(ResourceLocation.class);

            if (hasEntityArg && returnsRL)
            {
                try
                {
                    method.setAccessible(true);
                    this.texture = (ResourceLocation) method.invoke(this.renderer, this.entity);
                }
                catch (Exception e)
                {
                    Metamorph.log("Failed to get texture of a morph '" + this.name + "'!");
                    e.printStackTrace();
                }

                break;
            }
        }
    }

    /**
     * Setup this entity's hands
     * 
     * This guy is responsible for finding {@link ModelRenderer} in renderer's  
     * main model.
     * 
     * See {@link IHandProvider} for more information about support for hand 
     * rendering for third party support for your custom mob models who aren't 
     * {@link ModelBiped} or {@link ModelQuadruped}. 
     */
    @SideOnly(Side.CLIENT)
    @SuppressWarnings("rawtypes")
    protected void setupHands()
    {
        ModelBase model = ((RenderLivingBase) this.renderer).getMainModel();

        model.setRotationAngles(0, 0, 0, 0, 0, 0.0625F, this.entity);

        if (model instanceof IHandProvider)
        {
            this.leftHand = ((IHandProvider) model).getLeft();
            this.rightHand = ((IHandProvider) model).getRight();
        }
        else if (model instanceof ModelBiped)
        {
            this.leftHand = ((ModelBiped) model).bipedLeftArm;
            this.rightHand = ((ModelBiped) model).bipedRightArm;
        }
        else if (model instanceof ModelQuadruped)
        {
            this.leftHand = ((ModelQuadruped) model).leg2;
            this.rightHand = ((ModelQuadruped) model).leg3;
        }
        else
        {
            /* For anything else, pretty bad algorithm */
            List<ModelRenderer> left = new ArrayList<ModelRenderer>();
            List<ModelRenderer> right = new ArrayList<ModelRenderer>();

            left.addAll(model.boxList);
            right.addAll(model.boxList);

            Collections.sort(left, new Comparator<ModelRenderer>()
            {
                @Override
                public int compare(ModelRenderer a, ModelRenderer b)
                {
                    return (int) (a.rotationPointX - b.rotationPointX < 0 ? Math.floor(a.rotationPointX - b.rotationPointX) : Math.ceil(a.rotationPointX - b.rotationPointX));
                }
            });

            Collections.sort(right, new Comparator<ModelRenderer>()
            {
                @Override
                public int compare(ModelRenderer a, ModelRenderer b)
                {
                    return (int) (b.rotationPointX - a.rotationPointX < 0 ? Math.floor(b.rotationPointX - a.rotationPointX) : Math.ceil(b.rotationPointX - a.rotationPointX));
                }
            });

            this.leftHand = left.isEmpty() ? null : left.get(0);
            this.rightHand = right.isEmpty() ? null : right.get(0);
        }
    }

    /**
     * Set entity data 
     */
    public void setEntityData(NBTTagCompound tag)
    {
        this.entityData = tag;
    }

    /**
     * Get entity serialized {@link NBTTagCompound}
     * 
     * This method is going to be used for saving entity state to morph 
     * capability. 
     */
    public NBTTagCompound getEntityData()
    {
        return this.entityData;
    }

    /**
     * Check if this and given EntityMorphs are equal 
     */
    @Override
    public boolean equals(Object obj)
    {
        boolean result = super.equals(obj);

        if (obj instanceof EntityMorph)
        {
            boolean theSame = EntityUtils.compareData(((EntityMorph) obj).entityData, this.entityData);

            return result && theSame;
        }

        return result;
    }

    @Override
    public void reset()
    {
        this.resetEntity();
        this.entityData = null;

        if (this.customSettings)
        {
            this.settings = MorphSettings.DEFAULT;
            this.customSettings = false;
        }
    }

    public void resetEntity()
    {
        if (this.entity != null)
        {
            if (this.entity.world.isRemote)
            {
                this.renderer = null;
                this.triedHands = false;
            }

            this.entity = null;
        }
    }

    /**
     * Clone this {@link EntityMorph} 
     */
    @Override
    public AbstractMorph clone(boolean isRemote)
    {
        EntityMorph morph = new EntityMorph();

        AbstractMorph.copyBase(this, morph);
        morph.entityData = this.entityData.copy();

        return morph;
    }

    @Override
    public float getWidth(EntityLivingBase target)
    {
        if (this.entity == null)
        {
            this.setupEntity(target.world);
        }

        return this.entity.width;
    }

    @Override
    public float getHeight(EntityLivingBase target)
    {
        if (this.entity == null)
        {
            this.setupEntity(target.world);
        }

        return this.entity.height;
    }

    @Override
    public SoundEvent getHurtSound(EntityLivingBase target, DamageSource damageSource)
    {
        EntityLivingBase entity = this.getEntity(target.world);
        try
        {
            Method methodHurtSound = InvokeUtil.getPrivateMethod(entity.getClass(), EntityLivingBase.class, SoundHandler.GET_HURT_SOUND.getName());
            SoundEvent hurtSound = (SoundEvent) methodHurtSound.invoke(entity);
            if (hurtSound == null)
            {
                hurtSound = SoundHandler.NO_SOUND;
            }
            return hurtSound;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public SoundEvent getDeathSound(EntityLivingBase target)
    {
        EntityLivingBase entity = this.getEntity(target.world);
        try
        {
            Method methodDeathSound = InvokeUtil.getPrivateMethod(entity.getClass(), EntityLivingBase.class, SoundHandler.GET_DEATH_SOUND.getName());
            SoundEvent deathSound = (SoundEvent) methodDeathSound.invoke(entity);
            if (deathSound == null)
            {
                deathSound = SoundHandler.NO_SOUND;
            }
            return deathSound;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public boolean hasCustomStepSound(EntityLivingBase target)
    {
        return true;
    }

    @Override
    public void playStepSound(EntityLivingBase target)
    {
        EntityLivingBase entity = this.getEntity(target.world);
        try
        {
            Method methodPlayStep = InvokeUtil.getPrivateMethod(entity.getClass(), Entity.class, SoundHandler.PLAY_STEP_SOUND.getName(), BlockPos.class, Block.class);

            int x = MathHelper.floor(entity.posX);
            int y = MathHelper.floor(entity.posY - 0.20000000298023224D);
            int z = MathHelper.floor(entity.posZ);
            BlockPos pos = new BlockPos(x, y, z);
            Block block = entity.world.getBlockState(pos).getBlock();

            methodPlayStep.invoke(entity, pos, block);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    @Override
    public void onChangeDimension(EntityPlayer player, int oldDim, int currentDim)
    {
        if (this.entity != null)
        {
            this.entity.world = player.world;
        }
    }

    @Override
    public void toNBT(NBTTagCompound tag)
    {
        super.toNBT(tag);

        tag.setTag("EntityData", this.entityData);
    }

    @Override
    public void fromNBT(NBTTagCompound tag)
    {
        super.fromNBT(tag);

        this.entityData = tag.getCompoundTag("EntityData");
    }
}